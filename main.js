(()=>{"use strict";class e{constructor(e){this.length=e,this.hits=0,this.sunk=!1}get length(){return this._length}set length(e){this._length=e}hit(){this.hits+=1,this.isSunk()}isSunk(){this.hits==this.length&&(this.sunk=!0)}}class t{constructor(){this.board=[new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1})))],this.ships=[]}resetBoard(){this.board=[new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1})))],this.ships=[]}placeShip(t,i,r,l){if(0==l){for(let e=i;e<i+r;e++)if(null==this.board[t][e]||null!=this.board[t][e].ship)return!1;let l=new e(r);this.ships.push(l);for(let e=i;e<i+r;e++)this.board[t][e].ship=l;return!0}if(1==l){for(let e=t;e<t+r;e++)if(null==this.board[e]||null!=this.board[e][i].ship)return!1;let l=new e(r);this.ships.push(l);for(let e=t;e<t+r;e++)this.board[e][i].ship=l;return!0}}receiveAttack(e,t){null!=this.board[e][t].ship?(this.board[e][t].ship.hit(),this.board[e][t].isHit=!0):null==this.board[e][t].ship&&(this.board[e][t].isHit=!0)}allShipsSunk(){if(this.ships.every((e=>1==e.sunk)))return!0}}class i{constructor(){this.gameboard=new t}generateCoord(){return Math.floor(10*Math.random())}takeTurn(e,t,i){e.receiveAttack(t,i)}takeTurnAI(e){let t=0,i=0,r=!0;for(;r;)t=this.generateCoord(),i=this.generateCoord(),0==e.board[t][i].isHit&&(e.receiveAttack(t,i),r=!1)}}let r=document.querySelector(".human-grid"),l=document.querySelector(".computer-grid"),a=document.querySelector(".new-round"),n=document.querySelector(".winner-text > h1");function s(){d(r);for(let e=0;e<10;e++)for(let t=0;t<10;t++)if(null==h.gameboard.board[e][t].ship&&0==h.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square"),i.setAttribute("id",e.toString()+t.toString()),r.appendChild(i)}else if(null!=h.gameboard.board[e][t].ship&&0==h.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-ship"),i.setAttribute("id",e.toString()+t.toString()),r.appendChild(i)}else if(null==h.gameboard.board[e][t].ship&&1==h.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-hit"),i.setAttribute("id",e.toString()+t.toString()),r.appendChild(i)}else if(null!=h.gameboard.board[e][t].ship&&1==h.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-ship-hit"),i.setAttribute("id",e.toString()+t.toString()),r.appendChild(i)}}function o(){d(l);for(let e=0;e<10;e++)for(let t=0;t<10;t++)if(null==p.gameboard.board[e][t].ship&&0==p.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square"),i.setAttribute("id",e.toString()+t.toString()),l.appendChild(i)}else if(null!=p.gameboard.board[e][t].ship&&0==p.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-ship"),i.setAttribute("id",e.toString()+t.toString()),l.appendChild(i)}else if(null==p.gameboard.board[e][t].ship&&1==p.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-hit"),i.setAttribute("id",e.toString()+t.toString()),l.appendChild(i)}else if(null!=p.gameboard.board[e][t].ship&&1==p.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-ship-hit"),i.setAttribute("id",e.toString()+t.toString()),l.appendChild(i)}Array.from(document.querySelectorAll(".computer-grid > div")).forEach((e=>{e.addEventListener("click",m)}))}function d(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function u(e,t){s(),d(l);let i=document.querySelectorAll(".human-grid > .square");n.textContent="Place your "+e+"!",i.forEach((e=>{e.addEventListener("click",(function(e){let i=e.target.id,r=Number(i[0]),l=Number(i[1]);h.gameboard.placeShip(r,l,t,!1)&&(s(),document.querySelector(".human-label").textContent="YOU",document.querySelector(".computer-label").textContent="YOUR ENEMY",document.querySelector(".winner-text > h1").textContent="",p.placeRandomShip(5),p.placeRandomShip(4),p.placeRandomShip(3),p.placeRandomShip(3),p.placeRandomShip(2),o())}))}))}a.addEventListener("click",(function(e){h.gameboard.resetBoard(),p.gameboard.resetBoard(),n.textContent="",a.style.display="none",u("Carrier",5)}));let h=new i,p=new class extends i{generateCoord(){return Math.floor(10*Math.random())}takeTurnAI(e){let t=0,i=0,r=!0;for(;r;)t=this.generateCoord(),i=this.generateCoord(),0==e.board[t][i].isHit&&(e.receiveAttack(t,i),r=!1)}placeRandomShip(e){let t=0,i=0,r=Math.random()>.5,l=!0;for(;l;)t=this.generateCoord(),i=this.generateCoord(),this.gameboard.placeShip(t,i,e,r)&&(l=!1)}},c=document.querySelector(".new-round");function m(e){let t=e.target.id,i=Number(t[0]),r=Number(t[1]);0==p.gameboard.board[i][r].isHit&&(h.takeTurn(p.gameboard,i,r),o(),p.takeTurnAI(h.gameboard),s(),function(){let e=Array.from(document.querySelectorAll(".computer-grid > div")),t=document.querySelector(".winner-text > h1");p.gameboard.allShipsSunk()?(t.textContent="You Win!",e.forEach((e=>{e.removeEventListener("click",m)})),c.style.display="block"):h.gameboard.allShipsSunk()&&(t.textContent="You Lose!",e.forEach((e=>{e.removeEventListener("click",m)})),c.style.display="block")}())}u("Carrier",5)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,