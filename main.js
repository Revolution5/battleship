(()=>{"use strict";class e{constructor(e){this.length=e,this.hits=0,this.sunk=!1}get length(){return this._length}set length(e){this._length=e}hit(){this.hits+=1,this.isSunk()}isSunk(){this.hits==this.length&&(this.sunk=!0)}}class t{constructor(){this.board=[new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1})))],this.ships=[]}resetBoard(){this.board=[new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1})))],this.ships=[]}placeShip(t,i,l,r){if(0==r){for(let e=i;e<i+l;e++)if(null==this.board[t][e]||null!=this.board[t][e].ship)return!1;let r=new e(l);this.ships.push(r);for(let e=i;e<i+l;e++)this.board[t][e].ship=r;return!0}if(1==r){for(let e=t;e<t+l;e++)if(null==this.board[e]||null!=this.board[e][i].ship)return!1;let r=new e(l);this.ships.push(r);for(let e=t;e<t+l;e++)this.board[e][i].ship=r;return!0}}receiveAttack(e,t){null!=this.board[e][t].ship?(this.board[e][t].ship.hit(),this.board[e][t].isHit=!0):null==this.board[e][t].ship&&(this.board[e][t].isHit=!0)}allShipsSunk(){if(this.ships.every((e=>1==e.sunk)))return!0}}class i{constructor(){this.gameboard=new t}takeTurn(e,t,i){e.receiveAttack(t,i)}}let l=new i,r=new class extends i{generateCoord(){return Math.floor(10*Math.random())}takeTurnAI(e){let t=0,i=0,l=!0;for(;l;)t=this.generateCoord(),i=this.generateCoord(),0==e.board[t][i].isHit&&(e.receiveAttack(t,i),l=!1)}placeRandomShip(e){let t=0,i=0,l=Math.random()>.5,r=!0;for(;r;)t=this.generateCoord(),i=this.generateCoord(),this.gameboard.placeShip(t,i,e,l)&&(r=!1)}},a=document.querySelector(".new-round");function n(e){let t=e.target.id,i=Number(t[0]),s=Number(t[1]);0==r.gameboard.board[i][s].isHit&&(l.takeTurn(r.gameboard,i,s),m(),r.takeTurnAI(l.gameboard),p(),function(){let e=Array.from(document.querySelectorAll(".computer-grid > div")),t=document.querySelector(".winner-text > h1");r.gameboard.allShipsSunk()?(t.textContent="You Win!",e.forEach((e=>{e.removeEventListener("click",n)})),a.style.display="block"):l.gameboard.allShipsSunk()&&(t.textContent="You Lose!",e.forEach((e=>{e.removeEventListener("click",n)})),a.style.display="block")}())}let s=document.querySelector(".human-grid"),o=document.querySelector(".computer-grid"),d=document.querySelector(".new-round"),u=document.querySelector(".winner-text > h1"),h=!1,c=document.querySelector(".switch");function p(){b(s);for(let e=0;e<10;e++)for(let t=0;t<10;t++)if(null==l.gameboard.board[e][t].ship&&0==l.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square"),i.setAttribute("id",e.toString()+t.toString()),s.appendChild(i)}else if(null!=l.gameboard.board[e][t].ship&&0==l.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-ship"),i.setAttribute("id",e.toString()+t.toString()),s.appendChild(i)}else if(null==l.gameboard.board[e][t].ship&&1==l.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-hit"),i.setAttribute("id",e.toString()+t.toString()),s.appendChild(i)}else if(null!=l.gameboard.board[e][t].ship&&1==l.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-ship-hit"),i.setAttribute("id",e.toString()+t.toString()),s.appendChild(i)}!function(){let e=document.querySelectorAll(".human-grid > .square");0==l.gameboard.ships.length&&(u.textContent="Place your Carrier!"),e.forEach((e=>{l.gameboard.ships.length<5&&e.classList.add("hover"),e.addEventListener("click",(function(e){let t=e.target.id,i=Number(t[0]),a=Number(t[1]);0==l.gameboard.ships.length?l.gameboard.placeShip(i,a,5,h)&&(p(),u.textContent="Place your Battleship!"):1==l.gameboard.ships.length?l.gameboard.placeShip(i,a,4,h)&&(p(),u.textContent="Place your Cruiser!"):2==l.gameboard.ships.length?l.gameboard.placeShip(i,a,3,h)&&(p(),u.textContent="Place your Submarine!"):3==l.gameboard.ships.length?l.gameboard.placeShip(i,a,3,h)&&(p(),u.textContent="Place your Destroyer!"):4==l.gameboard.ships.length&&l.gameboard.placeShip(i,a,2,h)&&(p(),document.querySelector(".human-label").textContent="YOU",document.querySelector(".computer-label").textContent="YOUR ENEMY",document.querySelector(".winner-text > h1").textContent="",document.querySelector(".switch").style.display="none",r.placeRandomShip(5),r.placeRandomShip(4),r.placeRandomShip(3),r.placeRandomShip(3),r.placeRandomShip(2),m())}))}))}()}function m(){b(o);for(let e=0;e<10;e++)for(let t=0;t<10;t++)if(null==r.gameboard.board[e][t].ship&&0==r.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square"),i.setAttribute("id",e.toString()+t.toString()),o.appendChild(i)}else if(null!=r.gameboard.board[e][t].ship&&0==r.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square"),i.setAttribute("id",e.toString()+t.toString()),o.appendChild(i)}else if(null==r.gameboard.board[e][t].ship&&1==r.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-hit"),i.setAttribute("id",e.toString()+t.toString()),o.appendChild(i)}else if(null!=r.gameboard.board[e][t].ship&&1==r.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-ship-hit"),i.setAttribute("id",e.toString()+t.toString()),o.appendChild(i)}Array.from(document.querySelectorAll(".computer-grid > div")).forEach((e=>{e.addEventListener("click",n)}))}function b(e){for(;e.firstChild;)e.removeChild(e.firstChild)}c.addEventListener("click",(function(e){0==h?(h=!0,c.textContent="Rotate Horizontally"):1==h&&(h=!1,c.textContent="Rotate Vertically")})),d.addEventListener("click",(function(e){l.gameboard.resetBoard(),r.gameboard.resetBoard(),b(o),u.textContent="",d.style.display="none",document.querySelector(".human-label").textContent="",document.querySelector(".computer-label").textContent="",document.querySelector(".switch").style.display="block",p()})),p()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,