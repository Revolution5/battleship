(()=>{"use strict";class e{constructor(e){this.length=e,this.hits=0,this.sunk=!1}get length(){return this._length}set length(e){this._length=e}hit(){this.hits+=1,this.isSunk()}isSunk(){this.hits==this.length&&(this.sunk=!0)}}class t{constructor(){this.board=[new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1})))],this.ships=[]}resetBoard(){this.board=[new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1}))),new Array(10).fill(null).map((()=>({ship:null,isHit:!1})))],this.ships=[]}placeShip(t,i,r,l){if(0==l){for(let e=i;e<i+r;e++)if(null==this.board[t][e]||null!=this.board[t][e].ship)return!1;let l=new e(r);this.ships.push(l);for(let e=i;e<i+r;e++)this.board[t][e].ship=l;return!0}if(1==l){for(let e=t;e<t+r;e++)if(null==this.board[e]||null!=this.board[e][i].ship)return!1;let l=new e(r);this.ships.push(l);for(let e=t;e<t+r;e++)this.board[e][i].ship=l;return!0}}receiveAttack(e,t){null!=this.board[e][t].ship?(this.board[e][t].ship.hit(),this.board[e][t].isHit=!0):null==this.board[e][t].ship&&(this.board[e][t].isHit=!0)}allShipsSunk(){if(this.ships.every((e=>1==e.sunk)))return!0}}class i{constructor(){this.gameboard=new t}generateCoord(){return Math.floor(10*Math.random())}takeTurn(e,t,i){e.receiveAttack(t,i)}takeTurnAI(e){let t=0,i=0,r=!0;for(;r;)t=this.generateCoord(),i=this.generateCoord(),0==e.board[t][i].isHit&&(e.receiveAttack(t,i),r=!1)}}let r=document.querySelector(".human-grid"),l=document.querySelector(".computer-grid"),a=document.querySelector(".new-round"),n=document.querySelector(".winner-text > h1");function s(){d(r);for(let e=0;e<10;e++)for(let t=0;t<10;t++)if(null==u.gameboard.board[e][t].ship&&0==u.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square"),i.setAttribute("id",e.toString()+t.toString()),r.appendChild(i)}else if(null!=u.gameboard.board[e][t].ship&&0==u.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-ship"),i.setAttribute("id",e.toString()+t.toString()),r.appendChild(i)}else if(null==u.gameboard.board[e][t].ship&&1==u.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-hit"),i.setAttribute("id",e.toString()+t.toString()),r.appendChild(i)}else if(null!=u.gameboard.board[e][t].ship&&1==u.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-ship-hit"),i.setAttribute("id",e.toString()+t.toString()),r.appendChild(i)}}function o(){d(l);for(let e=0;e<10;e++)for(let t=0;t<10;t++)if(null==h.gameboard.board[e][t].ship&&0==h.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square"),i.setAttribute("id",e.toString()+t.toString()),l.appendChild(i)}else if(null!=h.gameboard.board[e][t].ship&&0==h.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square"),i.setAttribute("id",e.toString()+t.toString()),l.appendChild(i)}else if(null==h.gameboard.board[e][t].ship&&1==h.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-hit"),i.setAttribute("id",e.toString()+t.toString()),l.appendChild(i)}else if(null!=h.gameboard.board[e][t].ship&&1==h.gameboard.board[e][t].isHit){let i=document.createElement("div");i.classList.add("square-ship-hit"),i.setAttribute("id",e.toString()+t.toString()),l.appendChild(i)}Array.from(document.querySelectorAll(".computer-grid > div")).forEach((e=>{e.addEventListener("click",c)}))}function d(e){for(;e.firstChild;)e.removeChild(e.firstChild)}a.addEventListener("click",(function(e){n.textContent="",a.style.display="none",document.querySelector(".human-label").textContent="YOU",document.querySelector(".computer-label").textContent="YOUR ENEMY",u.gameboard.resetBoard(),h.gameboard.resetBoard(),h.placeRandomShip(5),h.placeRandomShip(4),h.placeRandomShip(3),h.placeRandomShip(3),h.placeRandomShip(2),s(),o()}));let u=new i,h=new class extends i{generateCoord(){return Math.floor(10*Math.random())}takeTurnAI(e){let t=0,i=0,r=!0;for(;r;)t=this.generateCoord(),i=this.generateCoord(),0==e.board[t][i].isHit&&(e.receiveAttack(t,i),r=!1)}placeRandomShip(e){let t=0,i=0,r=Math.random()>.5,l=!0;for(;l;)t=this.generateCoord(),i=this.generateCoord(),this.gameboard.placeShip(t,i,e,r)&&(l=!1)}},p=document.querySelector(".new-round");function c(e){let t=e.target.id,i=Number(t[0]),r=Number(t[1]);0==h.gameboard.board[i][r].isHit&&(u.takeTurn(h.gameboard,i,r),o(),h.takeTurnAI(u.gameboard),s(),function(){let e=Array.from(document.querySelectorAll(".computer-grid > div")),t=document.querySelector(".winner-text > h1");h.gameboard.allShipsSunk()?(t.textContent="You Win!",e.forEach((e=>{e.removeEventListener("click",c)})),p.style.display="block"):u.gameboard.allShipsSunk()&&(t.textContent="You Lose!",e.forEach((e=>{e.removeEventListener("click",c)})),p.style.display="block")}())}!function(e,t){s();let i=document.querySelectorAll(".human-grid > .square");n.textContent="Place your Carrier!",i.forEach((e=>{e.addEventListener("click",(function(e){let t=e.target.id,i=Number(t[0]),r=Number(t[1]);u.gameboard.placeShip(i,r,5,!1)&&s()}))}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,